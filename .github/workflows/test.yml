name: Test

on:
  push:
  pull_request:
    branches:
      - "**"
  workflow_dispatch:

env:
  VOICEVOX_ENGINE_REPO: "VOICEVOX/voicevox_nemo_engine" # 軽いのでNemoを使う
  VOICEVOX_ENGINE_VERSION: "0.14.0"

defaults:
  run:
    shell: bash

jobs:
  config: # 全 jobs で利用する定数の定義. `env` が利用できないコンテキストでも利用できる.
    runs-on: ubuntu-latest
    outputs:
      shouldUpdateSnapshots: ${{ steps.check-whether-to-update-snapshots.outputs.shouldUpdateSnapshots }}
    steps:
      - name: Check if commit message includes [update snapshots]
        id: check-whether-to-update-snapshots
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commits = ${{ toJson(github.event.commits) }};
            if (!commits) {
              // pull_request などでコミットがない場合はスキップ
              core.setOutput("shouldUpdateSnapshots", false);
              process.exit(0);
            }
            const shouldUpdateSnapshots = commits.some((commit) =>
              commit.message.toLowerCase().includes("[update snapshots]")
            );
            core.setOutput("shouldUpdateSnapshots", shouldUpdateSnapshots);
            console.log(`shouldUpdateSnapshots: ${shouldUpdateSnapshots}`);

  # ビルドのテスト
  build-test:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        uses: ./.github/actions/setup-environment
      - run: npm run electron:build

  # unit テスト
  unit-test:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - run: npm run test:unit

      - name: Setup playwright
        run: npx playwright install
      - name: Run Storybook tests
        run: |
          # .env
          cp .env.test .env

          # ランダムなポートを使う
          PORT=$(node -r net -e "server=net.createServer();server.listen(0,()=>{console.log(server.address().port);server.close()})")
          npx storybook dev --ci --port $PORT &

          # 起動を待つ
          elapsed=0
          until curl --output /dev/null --silent --head --fail http://localhost:$PORT; do
            echo "Waiting for Storybook to start on port $PORT..."
            sleep 5
            ((elapsed+=5))
            if [ "$elapsed" -ge "60" ]; then
              echo "Timed out waiting for Storybook to start."
              exit 1
            fi
          done

          # テスト
          npm run test:storybook -- --url "http://127.0.0.1:$PORT"
